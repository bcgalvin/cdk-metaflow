// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`vpc matches cfn output 1`] = `
Object {
  "Outputs": Object {
    "vpcresourcesapiEndpoint9316DD3B": Object {
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "https://",
            Object {
              "Ref": "vpcresourcesapi3B63971B",
            },
            ".execute-api.us-west-2.",
            Object {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            Object {
              "Ref": "vpcresourcesapiDeploymentStageapi5040988E",
            },
            "/",
          ],
        ],
      },
    },
    "vpcresourcesdashboarddashboardUriF38D782F": Object {
      "Export": Object {
        "Name": "metaflowDashboard",
      },
      "Value": "https://console.aws.amazon.com/cloudwatch/home#dashboards:name=MetaflowDashboard",
    },
    "vpcresourcesmetaflowexportsMETAFLOWBATCHJOBQUEUEOutput73471001": Object {
      "Export": Object {
        "Name": "METAFLOW_BATCH_JOB_QUEUE",
      },
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "arn:",
            Object {
              "Ref": "AWS::Partition",
            },
            ":batch:",
            Object {
              "Ref": "AWS::Region",
            },
            ":",
            Object {
              "Ref": "AWS::AccountId",
            },
            ":job-queue/jobs",
          ],
        ],
      },
    },
    "vpcresourcesmetaflowexportsMETAFLOWDATASTORESYSROOTS3OutputB3544A20": Object {
      "Export": Object {
        "Name": "METAFLOW_DATASTORE_SYSROOT_S3",
      },
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "s3://",
            Object {
              "Ref": "vpcresourcesbucket0B114C97",
            },
            "/metaflow",
          ],
        ],
      },
    },
    "vpcresourcesmetaflowexportsMETAFLOWDATATOOLSSYSROOTS3Output0DDB9305": Object {
      "Export": Object {
        "Name": "METAFLOW_DATATOOLS_SYSROOT_S3",
      },
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "s3://",
            Object {
              "Ref": "vpcresourcesbucket0B114C97",
            },
            "/data",
          ],
        ],
      },
    },
    "vpcresourcesmetaflowexportsMETAFLOWDEFAULTDATASTOREOutput7164BCA0": Object {
      "Export": Object {
        "Name": "METAFLOW_DEFAULT_DATASTORE",
      },
      "Value": "s3",
    },
    "vpcresourcesmetaflowexportsMETAFLOWDEFAULTMETADATAOutput9E1D5486": Object {
      "Export": Object {
        "Name": "METAFLOW_DEFAULT_METADATA",
      },
      "Value": "service",
    },
    "vpcresourcesmetaflowexportsMETAFLOWECSS3ACCESSIAMROLEOutputB45FA916": Object {
      "Export": Object {
        "Name": "METAFLOW_ECS_S3_ACCESS_IAM_ROLE",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "vpcresourcesbatchs3taskroleAAF11F70",
          "Arn",
        ],
      },
    },
    "vpcresourcesmetaflowexportsMETAFLOWEVENTSSFNACCESSIAMROLEOutputDBAB26C0": Object {
      "Export": Object {
        "Name": "METAFLOW_EVENTS_SFN_ACCESS_IAM_ROLE",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "vpcresourceseventbridgerole87A36230",
          "Arn",
        ],
      },
    },
    "vpcresourcesmetaflowexportsMETAFLOWSERVICEINTERNALURLOutputF9E04A06": Object {
      "Export": Object {
        "Name": "METAFLOW_SERVICE_INTERNAL_URL",
      },
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "http://",
            Object {
              "Fn::GetAtt": Array [
                "vpcresourcesnlbExternalNlb312FC480",
                "DNSName",
              ],
            },
            "/",
          ],
        ],
      },
    },
    "vpcresourcesmetaflowexportsMETAFLOWSERVICEURLOutput17496646": Object {
      "Export": Object {
        "Name": "METAFLOW_SERVICE_URL",
      },
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "http://",
            Object {
              "Fn::GetAtt": Array [
                "vpcresourcesnlbExternalNlb312FC480",
                "DNSName",
              ],
            },
            "/api",
          ],
        ],
      },
    },
    "vpcresourcesmetaflowexportsMETAFLOWSFNDYNAMODBTABLEOutputACA2540F": Object {
      "Export": Object {
        "Name": "METAFLOW_SFN_DYNAMO_DB_TABLE",
      },
      "Value": Object {
        "Ref": "vpcresourcestable216DD2E5",
      },
    },
    "vpcresourcesmetaflowexportsMETAFLOWSFNIAMROLEOutput318743CB": Object {
      "Export": Object {
        "Name": "METAFLOW_SFN_IAM_ROLE",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "vpcresourcesstepfunctionsrole9520D928",
          "Arn",
        ],
      },
    },
  },
  "Parameters": Object {
    "AssetParameters880fea5c7119606d6fa0ebff0d589506d5171b7dbd23286dcd2096a611612ec3ArtifactHash196A455E": Object {
      "Description": "Artifact hash for asset \\"880fea5c7119606d6fa0ebff0d589506d5171b7dbd23286dcd2096a611612ec3\\"",
      "Type": "String",
    },
    "AssetParameters880fea5c7119606d6fa0ebff0d589506d5171b7dbd23286dcd2096a611612ec3S3Bucket1FFC04C5": Object {
      "Description": "S3 bucket for asset \\"880fea5c7119606d6fa0ebff0d589506d5171b7dbd23286dcd2096a611612ec3\\"",
      "Type": "String",
    },
    "AssetParameters880fea5c7119606d6fa0ebff0d589506d5171b7dbd23286dcd2096a611612ec3S3VersionKey68233D67": Object {
      "Description": "S3 key for asset version \\"880fea5c7119606d6fa0ebff0d589506d5171b7dbd23286dcd2096a611612ec3\\"",
      "Type": "String",
    },
  },
  "Resources": Object {
    "gatewayLink66988216": Object {
      "Properties": Object {
        "Name": "apiGatewayECSLink",
        "TargetArns": Array [
          Object {
            "Ref": "vpcresourcesnlbExternalNlb312FC480",
          },
        ],
      },
      "Type": "AWS::ApiGateway::VpcLink",
    },
    "vpcresourcesComputeEnvironment075E50A5": Object {
      "Properties": Object {
        "ComputeResources": Object {
          "MaxvCpus": 90,
          "SecurityGroupIds": Array [
            Object {
              "Fn::GetAtt": Array [
                "vpcresourcesvpc14EAEEFF",
                "DefaultSecurityGroup",
              ],
            },
          ],
          "Subnets": Array [
            Object {
              "Ref": "vpcresourcesvpcPublicSubnet1Subnet1777CDC4",
            },
            Object {
              "Ref": "vpcresourcesvpcPublicSubnet2Subnet15B1DE5D",
            },
          ],
          "Type": "FARGATE",
        },
        "ServiceRole": Object {
          "Fn::GetAtt": Array [
            "vpcresourcesbatchexecutionroleAA0BFB2B",
            "Arn",
          ],
        },
        "State": "ENABLED",
        "Type": "MANAGED",
      },
      "Type": "AWS::Batch::ComputeEnvironment",
    },
    "vpcresourcesJobQueueF58BB111": Object {
      "DependsOn": Array [
        "vpcresourcesComputeEnvironment075E50A5",
      ],
      "Properties": Object {
        "ComputeEnvironmentOrder": Array [
          Object {
            "ComputeEnvironment": Object {
              "Ref": "vpcresourcesComputeEnvironment075E50A5",
            },
            "Order": 1,
          },
        ],
        "JobQueueName": "jobs",
        "Priority": 1,
        "State": "ENABLED",
      },
      "Type": "AWS::Batch::JobQueue",
    },
    "vpcresourcesapi3B63971B": Object {
      "Properties": Object {
        "EndpointConfiguration": Object {
          "Types": Array [
            "EDGE",
          ],
        },
        "Name": "api",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "vpcresourcesapiAccount2D1A1C2B": Object {
      "DependsOn": Array [
        "vpcresourcesapi3B63971B",
      ],
      "Properties": Object {
        "CloudWatchRoleArn": Object {
          "Fn::GetAtt": Array [
            "vpcresourcesapiCloudWatchRole342BDB7D",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
    },
    "vpcresourcesapiCloudWatchRole342BDB7D": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "vpcresourcesapiDeploymentC09F976Ea93ba9ee6e12a12b8f3b9799b9dc8695": Object {
      "DependsOn": Array [
        "vpcresourcesapiproxyANYC42B832A",
        "vpcresourcesapiproxy9B340F6B",
        "vpcresourcesapidbschemastatusGETD86B4E85",
        "vpcresourcesapidbschemastatus2EE2D6E2",
      ],
      "Properties": Object {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": Object {
          "Ref": "vpcresourcesapi3B63971B",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "vpcresourcesapiDeploymentStageapi5040988E": Object {
      "Properties": Object {
        "AccessLogSetting": Object {
          "DestinationArn": Object {
            "Fn::GetAtt": Array [
              "vpcresourcesapiapilogs4B15914F",
              "Arn",
            ],
          },
          "Format": "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] \\"$context.httpMethod $context.resourcePath $context.protocol\\" $context.status $context.responseLength $context.requestId",
        },
        "DeploymentId": Object {
          "Ref": "vpcresourcesapiDeploymentC09F976Ea93ba9ee6e12a12b8f3b9799b9dc8695",
        },
        "MethodSettings": Array [
          Object {
            "DataTraceEnabled": true,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "MetricsEnabled": true,
            "ResourcePath": "/*",
          },
        ],
        "RestApiId": Object {
          "Ref": "vpcresourcesapi3B63971B",
        },
        "StageName": "api",
        "TracingEnabled": true,
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "vpcresourcesapiapilogs4B15914F": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "LogGroupName": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AWS::StackName",
              },
              "-api",
            ],
          ],
        },
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "vpcresourcesapidbschemastatus2EE2D6E2": Object {
      "Properties": Object {
        "ParentId": Object {
          "Fn::GetAtt": Array [
            "vpcresourcesapi3B63971B",
            "RootResourceId",
          ],
        },
        "PathPart": "db_schema_status",
        "RestApiId": Object {
          "Ref": "vpcresourcesapi3B63971B",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "vpcresourcesapidbschemastatusGETD86B4E85": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": Object {
          "ConnectionId": Object {
            "Ref": "gatewayLink66988216",
          },
          "ConnectionType": "VPC_LINK",
          "IntegrationHttpMethod": "GET",
          "IntegrationResponses": Array [
            Object {
              "StatusCode": "200",
            },
          ],
          "PassthroughBehavior": "WHEN_NO_MATCH",
          "Type": "HTTP_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "http://",
                Object {
                  "Fn::GetAtt": Array [
                    "vpcresourcesnlbExternalNlb312FC480",
                    "DNSName",
                  ],
                },
                ":8082/db_schema_status",
              ],
            ],
          },
        },
        "ResourceId": Object {
          "Ref": "vpcresourcesapidbschemastatus2EE2D6E2",
        },
        "RestApiId": Object {
          "Ref": "vpcresourcesapi3B63971B",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "vpcresourcesapiproxy9B340F6B": Object {
      "Properties": Object {
        "ParentId": Object {
          "Fn::GetAtt": Array [
            "vpcresourcesapi3B63971B",
            "RootResourceId",
          ],
        },
        "PathPart": "{proxy+}",
        "RestApiId": Object {
          "Ref": "vpcresourcesapi3B63971B",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "vpcresourcesapiproxyANYC42B832A": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "ANY",
        "Integration": Object {
          "CacheKeyParameters": Array [
            "method.request.path.proxy",
          ],
          "ConnectionId": Object {
            "Ref": "gatewayLink66988216",
          },
          "ConnectionType": "VPC_LINK",
          "IntegrationHttpMethod": "ANY",
          "IntegrationResponses": Array [
            Object {
              "StatusCode": "200",
            },
          ],
          "PassthroughBehavior": "WHEN_NO_MATCH",
          "RequestParameters": Object {
            "integration.request.path.proxy": "method.request.path.proxy",
          },
          "Type": "HTTP_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "http://",
                Object {
                  "Fn::GetAtt": Array [
                    "vpcresourcesnlbExternalNlb312FC480",
                    "DNSName",
                  ],
                },
                "/{proxy}",
              ],
            ],
          },
        },
        "RequestParameters": Object {
          "method.request.path.proxy": true,
        },
        "ResourceId": Object {
          "Ref": "vpcresourcesapiproxy9B340F6B",
        },
        "RestApiId": Object {
          "Ref": "vpcresourcesapi3B63971B",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "vpcresourcesbatchexecutionroleAA0BFB2B": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "batch.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSBatchServiceRole",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXRayDaemonWriteAccess",
              ],
            ],
          },
        ],
        "RoleName": "TestBatchExecutionRole",
      },
      "Type": "AWS::IAM::Role",
    },
    "vpcresourcesbatchs3taskroleAAF11F70": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXRayDaemonWriteAccess",
              ],
            ],
          },
        ],
        "RoleName": "TestBatchS3TaskRole",
      },
      "Type": "AWS::IAM::Role",
    },
    "vpcresourcesbatchs3taskroleDefaultPolicyB8AB20CB": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":log-group:*",
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject*",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "vpcresourcesbucket0B114C97",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "vpcresourcesbucket0B114C97",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "vpcresourcestable216DD2E5",
                    "Arn",
                  ],
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "vpcresourcesbatchs3taskroleDefaultPolicyB8AB20CB",
        "Roles": Array [
          Object {
            "Ref": "vpcresourcesbatchs3taskroleAAF11F70",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "vpcresourcesbucket0B114C97": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
    },
    "vpcresourcesbucketPolicy8DDF9B46": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "vpcresourcesbucket0B114C97",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:*",
              "Condition": Object {
                "StringNotEquals": Object {
                  "s3:authType": "REST-HEADER",
                },
              },
              "Effect": "Deny",
              "Principal": Object {
                "AWS": "*",
              },
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":s3:::",
                    Object {
                      "Ref": "vpcresourcesbucket0B114C97",
                    },
                    "/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "vpcresourcesdashboardDashboard001E85AB": Object {
      "Properties": Object {
        "DashboardBody": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{\\"widgets\\":[{\\"type\\":\\"metric\\",\\"width\\":12,\\"height\\":6,\\"x\\":0,\\"y\\":0,\\"properties\\":{\\"view\\":\\"timeSeries\\",\\"title\\":\\"Metaflow S3 Artifacts\\",\\"region\\":\\"",
              Object {
                "Ref": "AWS::Region",
              },
              "\\",\\"metrics\\":[[\\"AWS/S3\\",\\"NumberOfObjects\\",\\"BucketName\\",\\"",
              Object {
                "Ref": "vpcresourcesbucket0B114C97",
              },
              "\\",\\"StorageType\\",\\"AllStorageTypes\\",{\\"period\\":900,\\"stat\\":\\"Sum\\"}],[\\"AWS/S3\\",\\"BucketSizeBytes\\",\\"BucketName\\",\\"",
              Object {
                "Ref": "vpcresourcesbucket0B114C97",
              },
              "\\",\\"StorageType\\",\\"StandardStorage\\",{\\"period\\":900,\\"stat\\":\\"Sum\\",\\"yAxis\\":\\"right\\"}]],\\"yAxis\\":{\\"left\\":{\\"min\\":0},\\"right\\":{\\"min\\":0}}}},{\\"type\\":\\"metric\\",\\"width\\":12,\\"height\\":6,\\"x\\":12,\\"y\\":0,\\"properties\\":{\\"view\\":\\"timeSeries\\",\\"title\\":\\"Metadata Service\\",\\"region\\":\\"",
              Object {
                "Ref": "AWS::Region",
              },
              "\\",\\"metrics\\":[[\\"AWS/ECS\\",\\"CPUUtilization\\",\\"ClusterName\\",\\"",
              Object {
                "Ref": "vpcresourcesmetaflowcluster4FC7C6DC",
              },
              "\\",\\"ServiceName\\",\\"",
              Object {
                "Fn::GetAtt": Array [
                  "vpcresourcesfargateserviceService8E70CA47",
                  "Name",
                ],
              },
              "\\"],[\\"AWS/ECS\\",\\"MemoryUtilization\\",\\"ClusterName\\",\\"",
              Object {
                "Ref": "vpcresourcesmetaflowcluster4FC7C6DC",
              },
              "\\",\\"ServiceName\\",\\"",
              Object {
                "Fn::GetAtt": Array [
                  "vpcresourcesfargateserviceService8E70CA47",
                  "Name",
                ],
              },
              "\\",{\\"yAxis\\":\\"right\\"}]],\\"yAxis\\":{},\\"period\\":900}}]}",
            ],
          ],
        },
        "DashboardName": "MetaflowDashboard",
      },
      "Type": "AWS::CloudWatch::Dashboard",
    },
    "vpcresourcesdatabaseDBInstance2B7BA8E2": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "AllocatedStorage": "20",
        "BackupRetentionPeriod": 7,
        "CopyTagsToSnapshot": true,
        "DBInstanceClass": "db.t2.small",
        "DBName": "metaflow",
        "DBParameterGroupName": "default.postgres11",
        "DBSubnetGroupName": Object {
          "Ref": "vpcresourcesdatabaseDBInstanceSubnetGroup6AFC541D",
        },
        "DeletionProtection": false,
        "Engine": "postgres",
        "EngineVersion": "11.5",
        "MasterUserPassword": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{{resolve:secretsmanager:",
              Object {
                "Ref": "vpcresourcesdatabasemetaflowrdssecret38B9B679",
              },
              ":SecretString:password::}}",
            ],
          ],
        },
        "MasterUsername": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{{resolve:secretsmanager:",
              Object {
                "Ref": "vpcresourcesdatabasemetaflowrdssecret38B9B679",
              },
              ":SecretString:username::}}",
            ],
          ],
        },
        "PubliclyAccessible": false,
        "StorageType": "gp2",
        "VPCSecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "vpcresourcesrdssg8F201A43",
              "GroupId",
            ],
          },
        ],
      },
      "Type": "AWS::RDS::DBInstance",
      "UpdateReplacePolicy": "Delete",
    },
    "vpcresourcesdatabaseDBInstanceSubnetGroup6AFC541D": Object {
      "Properties": Object {
        "DBSubnetGroupDescription": "Subnet group for DBInstance database",
        "SubnetIds": Array [
          Object {
            "Ref": "vpcresourcesvpcPublicSubnet1Subnet1777CDC4",
          },
          Object {
            "Ref": "vpcresourcesvpcPublicSubnet2Subnet15B1DE5D",
          },
        ],
      },
      "Type": "AWS::RDS::DBSubnetGroup",
    },
    "vpcresourcesdatabasemetaflowrdssecret38B9B679": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "Description": "This is a Secrets Manager secret for an RDS DB instance",
        "GenerateSecretString": Object {
          "ExcludePunctuation": true,
          "GenerateStringKey": "password",
          "IncludeSpace": false,
          "SecretStringTemplate": "{\\"username\\":\\"master\\"}",
        },
        "Name": "metaflow-rds-secret",
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "vpcresourcesdatabasemetaflowrdssecretAttachment7CCB2D76": Object {
      "Properties": Object {
        "SecretId": Object {
          "Ref": "vpcresourcesdatabasemetaflowrdssecret38B9B679",
        },
        "TargetId": Object {
          "Ref": "vpcresourcesdatabaseDBInstance2B7BA8E2",
        },
        "TargetType": "AWS::RDS::DBInstance",
      },
      "Type": "AWS::SecretsManager::SecretTargetAttachment",
    },
    "vpcresourcesdbmigratehandlerDEBEAAD8": Object {
      "DependsOn": Array [
        "vpcresourceslambdaecsexecutionroleDefaultPolicy6BD66225",
        "vpcresourceslambdaecsexecutionroleB58119A5",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameters880fea5c7119606d6fa0ebff0d589506d5171b7dbd23286dcd2096a611612ec3S3Bucket1FFC04C5",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters880fea5c7119606d6fa0ebff0d589506d5171b7dbd23286dcd2096a611612ec3S3VersionKey68233D67",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters880fea5c7119606d6fa0ebff0d589506d5171b7dbd23286dcd2096a611612ec3S3VersionKey68233D67",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Description": "Trigger DB Migration",
        "Environment": Object {
          "Variables": Object {
            "MD_LB_ADDRESS": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "http://",
                  Object {
                    "Fn::GetAtt": Array [
                      "vpcresourcesnlbExternalNlb312FC480",
                      "DNSName",
                    ],
                  },
                  ":8082",
                ],
              ],
            },
          },
        },
        "FunctionName": "migrate-db",
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "vpcresourceslambdaecsexecutionroleB58119A5",
            "Arn",
          ],
        },
        "Runtime": "python3.8",
        "VpcConfig": Object {
          "SecurityGroupIds": Array [
            Object {
              "Fn::GetAtt": Array [
                "vpcresourcesfargatesg0D003221",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": Array [
            Object {
              "Ref": "vpcresourcesvpcPublicSubnet1Subnet1777CDC4",
            },
            Object {
              "Ref": "vpcresourcesvpcPublicSubnet2Subnet15B1DE5D",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "vpcresourcesecsexecutionroleDC762D89": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": "TestEcsExecutionRole",
      },
      "Type": "AWS::IAM::Role",
    },
    "vpcresourcesecsexecutionroleDefaultPolicy65761754": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ecr:GetAuthorizationToken",
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ecr:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":repository/*",
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "vpcresourcesecsloggroup78A2CD2D",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "vpcresourcesdatabasemetaflowrdssecret38B9B679",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "vpcresourcesecsexecutionroleDefaultPolicy65761754",
        "Roles": Array [
          Object {
            "Ref": "vpcresourcesecsexecutionroleDC762D89",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "vpcresourcesecsloggroup78A2CD2D": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "LogGroupName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/ecs/",
              Object {
                "Ref": "AWS::StackName",
              },
              "-metadata-service-v2",
            ],
          ],
        },
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "vpcresourcesecsroleA0E1BA7F": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "TestEcsRole",
      },
      "Type": "AWS::IAM::Role",
    },
    "vpcresourcesecsroleDefaultPolicy6900C9CD": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject*",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "vpcresourcesbucket0B114C97",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "vpcresourcesbucket0B114C97",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "vpcresourcesecsroleDefaultPolicy6900C9CD",
        "Roles": Array [
          Object {
            "Ref": "vpcresourcesecsroleA0E1BA7F",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "vpcresourcesecstaskrole7D6BB8A3": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXRayDaemonWriteAccess",
              ],
            ],
          },
        ],
        "RoleName": "Test-EcsTaskRole",
      },
      "Type": "AWS::IAM::Role",
    },
    "vpcresourcesecstaskroleDefaultPolicyC62BC9F4": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject*",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "vpcresourcesbucket0B114C97",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "vpcresourcesbucket0B114C97",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "vpcresourcesecsloggroup78A2CD2D",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "vpcresourcesecstaskroleDefaultPolicyC62BC9F4",
        "Roles": Array [
          Object {
            "Ref": "vpcresourcesecstaskrole7D6BB8A3",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "vpcresourceseventbridgerole87A36230": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": "TestEventBridgeRole",
      },
      "Type": "AWS::IAM::Role",
    },
    "vpcresourceseventbridgeroleDefaultPolicy4163555B": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":states:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":stateMachine:*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "vpcresourceseventbridgeroleDefaultPolicy4163555B",
        "Roles": Array [
          Object {
            "Ref": "vpcresourceseventbridgerole87A36230",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "vpcresourceseventbus1134EA7D": Object {
      "Properties": Object {
        "Name": "Testvpcresourceseventbus46ED1341",
      },
      "Type": "AWS::Events::EventBus",
    },
    "vpcresourcesfargateserviceService8E70CA47": Object {
      "DependsOn": Array [
        "vpcresourcesnlbdbmigratelistenerE39F770F",
        "vpcresourcesnlbnlblistener024DA66E",
      ],
      "Properties": Object {
        "Cluster": Object {
          "Ref": "vpcresourcesmetaflowcluster4FC7C6DC",
        },
        "DeploymentConfiguration": Object {
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 75,
        },
        "DesiredCount": 1,
        "EnableECSManagedTags": false,
        "HealthCheckGracePeriodSeconds": 600,
        "LaunchType": "FARGATE",
        "LoadBalancers": Array [
          Object {
            "ContainerName": "metadata-service-v2",
            "ContainerPort": 8080,
            "TargetGroupArn": Object {
              "Ref": "vpcresourcesnlbnlbtargetgroup9D349692",
            },
          },
          Object {
            "ContainerName": "metadata-service-v2",
            "ContainerPort": 8082,
            "TargetGroupArn": Object {
              "Ref": "vpcresourcesnlbdbmigratetargetgroup9CAB2245",
            },
          },
        ],
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "ENABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "vpcresourcesfargatesg0D003221",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "vpcresourcesvpcPublicSubnet1Subnet1777CDC4",
              },
              Object {
                "Ref": "vpcresourcesvpcPublicSubnet2Subnet15B1DE5D",
              },
            ],
          },
        },
        "TaskDefinition": Object {
          "Ref": "vpcresourcesfargateservicemetaflowfargatetaskdefinition3695585A",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "vpcresourcesfargateservicemetaflowfargatetaskdefinition3695585A": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Cpu": 512,
            "Environment": Array [
              Object {
                "Name": "MF_METADATA_DB_HOST",
                "Value": Object {
                  "Fn::GetAtt": Array [
                    "vpcresourcesdatabaseDBInstance2B7BA8E2",
                    "Endpoint.Address",
                  ],
                },
              },
              Object {
                "Name": "MF_METADATA_DB_PORT",
                "Value": Object {
                  "Fn::GetAtt": Array [
                    "vpcresourcesdatabaseDBInstance2B7BA8E2",
                    "Endpoint.Port",
                  ],
                },
              },
              Object {
                "Name": "MF_METADATA_DB_USER",
                "Value": "master",
              },
              Object {
                "Name": "MF_METADATA_DB_PSWD",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "{{resolve:secretsmanager:",
                      Object {
                        "Ref": "vpcresourcesdatabasemetaflowrdssecret38B9B679",
                      },
                      ":SecretString:password::}}",
                    ],
                  ],
                },
              },
              Object {
                "Name": "MF_METADATA_DB_NAME",
                "Value": "metaflow",
              },
            ],
            "Essential": true,
            "Image": "netflixoss/metaflow_metadata_service",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "vpcresourcesecsloggroup78A2CD2D",
                },
                "awslogs-region": "us-west-2",
                "awslogs-stream-prefix": "ecs",
              },
            },
            "Memory": 1024,
            "Name": "metadata-service-v2",
            "PortMappings": Array [
              Object {
                "ContainerPort": 8080,
                "HostPort": 8080,
                "Protocol": "tcp",
              },
              Object {
                "ContainerPort": 8082,
                "HostPort": 8082,
                "Protocol": "tcp",
              },
            ],
          },
        ],
        "Cpu": "512",
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "vpcresourcesecsexecutionroleDC762D89",
            "Arn",
          ],
        },
        "Family": "metadata-service-v2",
        "Memory": "1024",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "vpcresourcesecstaskrole7D6BB8A3",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "vpcresourcesfargatesg0D003221": Object {
      "Properties": Object {
        "GroupDescription": "Test/vpc-resources/fargate-sg",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": Object {
              "Fn::GetAtt": Array [
                "vpcresourcesvpc14EAEEFF",
                "CidrBlock",
              ],
            },
            "Description": "Allow API Calls Internally",
            "FromPort": 8080,
            "IpProtocol": "tcp",
            "ToPort": 8080,
          },
          Object {
            "CidrIp": Object {
              "Fn::GetAtt": Array [
                "vpcresourcesvpc14EAEEFF",
                "CidrBlock",
              ],
            },
            "Description": "Allow API Calls Internally",
            "FromPort": 8082,
            "IpProtocol": "tcp",
            "ToPort": 8082,
          },
        ],
        "VpcId": Object {
          "Ref": "vpcresourcesvpc14EAEEFF",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "vpcresourcesfargatesgfromTestvpcresourcesfargatesgA384A938ALLTRAFFIC00E42B61": Object {
      "Properties": Object {
        "Description": "Internal Communication",
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "vpcresourcesfargatesg0D003221",
            "GroupId",
          ],
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "vpcresourcesfargatesg0D003221",
            "GroupId",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "vpcresourceslambdaecsexecutionroleB58119A5": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXRayDaemonWriteAccess",
              ],
            ],
          },
        ],
        "RoleName": "TestLambdaEcsExecuteRole",
      },
      "Type": "AWS::IAM::Role",
    },
    "vpcresourceslambdaecsexecutionroleDefaultPolicy6BD66225": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DeleteNetworkInterface",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":log-group:*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "vpcresourceslambdaecsexecutionroleDefaultPolicy6BD66225",
        "Roles": Array [
          Object {
            "Ref": "vpcresourceslambdaecsexecutionroleB58119A5",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "vpcresourcesmetaflowcluster4FC7C6DC": Object {
      "Properties": Object {
        "ClusterSettings": Array [
          Object {
            "Name": "containerInsights",
            "Value": "enabled",
          },
        ],
      },
      "Type": "AWS::ECS::Cluster",
    },
    "vpcresourcesmetaflowclusterD806DF3F": Object {
      "Properties": Object {
        "CapacityProviders": Array [
          "FARGATE",
          "FARGATE_SPOT",
        ],
        "Cluster": Object {
          "Ref": "vpcresourcesmetaflowcluster4FC7C6DC",
        },
        "DefaultCapacityProviderStrategy": Array [],
      },
      "Type": "AWS::ECS::ClusterCapacityProviderAssociations",
    },
    "vpcresourcesmetaflowexportsMETAFLOWBATCHJOBQUEUEParam1C028C0B": Object {
      "Properties": Object {
        "Name": "METAFLOW_BATCH_JOB_QUEUE",
        "Type": "String",
        "Value": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":batch:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":job-queue/jobs",
            ],
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "vpcresourcesmetaflowexportsMETAFLOWDATASTORESYSROOTS3Param52AEA054": Object {
      "Properties": Object {
        "Name": "METAFLOW_DATASTORE_SYSROOT_S3",
        "Type": "String",
        "Value": Object {
          "Fn::Join": Array [
            "",
            Array [
              "s3://",
              Object {
                "Ref": "vpcresourcesbucket0B114C97",
              },
              "/metaflow",
            ],
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "vpcresourcesmetaflowexportsMETAFLOWDATATOOLSSYSROOTS3ParamE91899B0": Object {
      "Properties": Object {
        "Name": "METAFLOW_DATATOOLS_SYSROOT_S3",
        "Type": "String",
        "Value": Object {
          "Fn::Join": Array [
            "",
            Array [
              "s3://",
              Object {
                "Ref": "vpcresourcesbucket0B114C97",
              },
              "/data",
            ],
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "vpcresourcesmetaflowexportsMETAFLOWDEFAULTDATASTOREParam0ED1529B": Object {
      "Properties": Object {
        "Name": "METAFLOW_DEFAULT_DATASTORE",
        "Type": "String",
        "Value": "s3",
      },
      "Type": "AWS::SSM::Parameter",
    },
    "vpcresourcesmetaflowexportsMETAFLOWDEFAULTMETADATAParam6537D435": Object {
      "Properties": Object {
        "Name": "METAFLOW_DEFAULT_METADATA",
        "Type": "String",
        "Value": "service",
      },
      "Type": "AWS::SSM::Parameter",
    },
    "vpcresourcesmetaflowexportsMETAFLOWECSS3ACCESSIAMROLEParamF193916D": Object {
      "Properties": Object {
        "Name": "METAFLOW_ECS_S3_ACCESS_IAM_ROLE",
        "Type": "String",
        "Value": Object {
          "Fn::GetAtt": Array [
            "vpcresourcesbatchs3taskroleAAF11F70",
            "Arn",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "vpcresourcesmetaflowexportsMETAFLOWEVENTSSFNACCESSIAMROLEParam232D2713": Object {
      "Properties": Object {
        "Name": "METAFLOW_EVENTS_SFN_ACCESS_IAM_ROLE",
        "Type": "String",
        "Value": Object {
          "Fn::GetAtt": Array [
            "vpcresourceseventbridgerole87A36230",
            "Arn",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "vpcresourcesmetaflowexportsMETAFLOWSERVICEINTERNALURLParam832A28DA": Object {
      "Properties": Object {
        "Name": "METAFLOW_SERVICE_INTERNAL_URL",
        "Type": "String",
        "Value": Object {
          "Fn::Join": Array [
            "",
            Array [
              "http://",
              Object {
                "Fn::GetAtt": Array [
                  "vpcresourcesnlbExternalNlb312FC480",
                  "DNSName",
                ],
              },
              "/",
            ],
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "vpcresourcesmetaflowexportsMETAFLOWSERVICEURLParamA878C698": Object {
      "Properties": Object {
        "Name": "METAFLOW_SERVICE_URL",
        "Type": "String",
        "Value": Object {
          "Fn::Join": Array [
            "",
            Array [
              "http://",
              Object {
                "Fn::GetAtt": Array [
                  "vpcresourcesnlbExternalNlb312FC480",
                  "DNSName",
                ],
              },
              "/api",
            ],
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "vpcresourcesmetaflowexportsMETAFLOWSFNDYNAMODBTABLEParam53CAD397": Object {
      "Properties": Object {
        "Name": "METAFLOW_SFN_DYNAMO_DB_TABLE",
        "Type": "String",
        "Value": Object {
          "Ref": "vpcresourcestable216DD2E5",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "vpcresourcesmetaflowexportsMETAFLOWSFNIAMROLEParamE1E29725": Object {
      "Properties": Object {
        "Name": "METAFLOW_SFN_IAM_ROLE",
        "Type": "String",
        "Value": Object {
          "Fn::GetAtt": Array [
            "vpcresourcesstepfunctionsrole9520D928",
            "Arn",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "vpcresourcesnlbExternalNlb312FC480": Object {
      "Properties": Object {
        "LoadBalancerAttributes": Array [
          Object {
            "Key": "deletion_protection.enabled",
            "Value": "false",
          },
        ],
        "Scheme": "internal",
        "Subnets": Array [
          Object {
            "Ref": "vpcresourcesvpcPublicSubnet1Subnet1777CDC4",
          },
          Object {
            "Ref": "vpcresourcesvpcPublicSubnet2Subnet15B1DE5D",
          },
        ],
        "Type": "network",
      },
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
    },
    "vpcresourcesnlbdbmigratelistenerE39F770F": Object {
      "Properties": Object {
        "DefaultActions": Array [
          Object {
            "TargetGroupArn": Object {
              "Ref": "vpcresourcesnlbdbmigratetargetgroup9CAB2245",
            },
            "Type": "forward",
          },
        ],
        "LoadBalancerArn": Object {
          "Ref": "vpcresourcesnlbExternalNlb312FC480",
        },
        "Port": 8082,
        "Protocol": "TCP",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "vpcresourcesnlbdbmigratetargetgroup9CAB2245": Object {
      "Properties": Object {
        "HealthCheckIntervalSeconds": 10,
        "HealthCheckPort": "8080",
        "HealthCheckProtocol": "TCP",
        "HealthCheckTimeoutSeconds": 10,
        "HealthyThresholdCount": 2,
        "Port": 8082,
        "Protocol": "TCP",
        "TargetType": "ip",
        "UnhealthyThresholdCount": 2,
        "VpcId": Object {
          "Ref": "vpcresourcesvpc14EAEEFF",
        },
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
    },
    "vpcresourcesnlbnlblistener024DA66E": Object {
      "Properties": Object {
        "DefaultActions": Array [
          Object {
            "TargetGroupArn": Object {
              "Ref": "vpcresourcesnlbnlbtargetgroup9D349692",
            },
            "Type": "forward",
          },
        ],
        "LoadBalancerArn": Object {
          "Ref": "vpcresourcesnlbExternalNlb312FC480",
        },
        "Port": 80,
        "Protocol": "TCP",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "vpcresourcesnlbnlbtargetgroup9D349692": Object {
      "Properties": Object {
        "HealthCheckIntervalSeconds": 10,
        "HealthCheckProtocol": "TCP",
        "HealthCheckTimeoutSeconds": 10,
        "HealthyThresholdCount": 2,
        "Port": 8080,
        "Protocol": "TCP",
        "TargetType": "ip",
        "UnhealthyThresholdCount": 2,
        "VpcId": Object {
          "Ref": "vpcresourcesvpc14EAEEFF",
        },
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
    },
    "vpcresourcesrdssg8F201A43": Object {
      "Properties": Object {
        "GroupDescription": "Test/vpc-resources/rds-sg",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "vpcresourcesvpc14EAEEFF",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "vpcresourcesrdssgfromTestvpcresourcesfargatesgA384A9385432E33ED2E8": Object {
      "Properties": Object {
        "Description": "from TestvpcresourcesfargatesgA384A938:5432",
        "FromPort": 5432,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "vpcresourcesrdssg8F201A43",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "vpcresourcesfargatesg0D003221",
            "GroupId",
          ],
        },
        "ToPort": 5432,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "vpcresourcesstepfunctionsrole9520D928": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "states.us-west-2.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXRayDaemonWriteAccess",
              ],
            ],
          },
        ],
        "RoleName": "TestStepFunctionsRole",
      },
      "Type": "AWS::IAM::Role",
    },
    "vpcresourcesstepfunctionsroleDefaultPolicy954BC016": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "batch:TerminateJob",
                "batch:DescribeJobs",
                "batch:DescribeJobDefinitions",
                "batch:DescribeJobQueues",
                "batch:RegisterJobDefinition",
                "batch:SubmitJob",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "logs:CreateLogDelivery",
                "logs:GetLogDelivery",
                "logs:UpdateLogDelivery",
                "logs:DeleteLogDelivery",
                "logs:ListLogDeliveries",
                "logs:PutResourcePolicy",
                "logs:DescribeResourcePolicies",
                "logs:DescribeLogGroups",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "events:PutTargets",
                "events:DescribeRule",
                "events:PutRule",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":events:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":rule/StepFunctionsGetEventsForBatchJobsRule",
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject*",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "vpcresourcesbucket0B114C97",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "vpcresourcesbucket0B114C97",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "vpcresourcestable216DD2E5",
                    "Arn",
                  ],
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            Object {
              "Action": "events:PutEvents",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "vpcresourceseventbus1134EA7D",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "vpcresourcesstepfunctionsroleDefaultPolicy954BC016",
        "Roles": Array [
          Object {
            "Ref": "vpcresourcesstepfunctionsrole9520D928",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "vpcresourcestable216DD2E5": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "AttributeDefinitions": Array [
          Object {
            "AttributeName": "pathspec",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": Array [
          Object {
            "AttributeName": "pathspec",
            "KeyType": "HASH",
          },
        ],
        "PointInTimeRecoverySpecification": Object {
          "PointInTimeRecoveryEnabled": true,
        },
        "TimeToLiveSpecification": Object {
          "AttributeName": "ttl",
          "Enabled": true,
        },
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Delete",
    },
    "vpcresourcesvpc14EAEEFF": Object {
      "Properties": Object {
        "CidrBlock": "10.20.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Test/vpc-resources/vpc",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "vpcresourcesvpcIGW4B72B206": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Test/vpc-resources/vpc",
          },
        ],
      },
      "Type": "AWS::EC2::InternetGateway",
    },
    "vpcresourcesvpcPublicSubnet1DefaultRoute7472D51E": Object {
      "DependsOn": Array [
        "vpcresourcesvpcVPCGW327AF424",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "vpcresourcesvpcIGW4B72B206",
        },
        "RouteTableId": Object {
          "Ref": "vpcresourcesvpcPublicSubnet1RouteTableE91350F3",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "vpcresourcesvpcPublicSubnet1RouteTableAssociationE4EFA19F": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "vpcresourcesvpcPublicSubnet1RouteTableE91350F3",
        },
        "SubnetId": Object {
          "Ref": "vpcresourcesvpcPublicSubnet1Subnet1777CDC4",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "vpcresourcesvpcPublicSubnet1RouteTableE91350F3": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Test/vpc-resources/vpc/PublicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "vpcresourcesvpc14EAEEFF",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "vpcresourcesvpcPublicSubnet1Subnet1777CDC4": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1a",
        "CidrBlock": "10.20.0.0/24",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "Test/vpc-resources/vpc/PublicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "vpcresourcesvpc14EAEEFF",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "vpcresourcesvpcPublicSubnet2DefaultRoute2F532CC2": Object {
      "DependsOn": Array [
        "vpcresourcesvpcVPCGW327AF424",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "vpcresourcesvpcIGW4B72B206",
        },
        "RouteTableId": Object {
          "Ref": "vpcresourcesvpcPublicSubnet2RouteTable420A353C",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "vpcresourcesvpcPublicSubnet2RouteTable420A353C": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Test/vpc-resources/vpc/PublicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "vpcresourcesvpc14EAEEFF",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "vpcresourcesvpcPublicSubnet2RouteTableAssociation445A0707": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "vpcresourcesvpcPublicSubnet2RouteTable420A353C",
        },
        "SubnetId": Object {
          "Ref": "vpcresourcesvpcPublicSubnet2Subnet15B1DE5D",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "vpcresourcesvpcPublicSubnet2Subnet15B1DE5D": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1b",
        "CidrBlock": "10.20.1.0/24",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "Test/vpc-resources/vpc/PublicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "vpcresourcesvpc14EAEEFF",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "vpcresourcesvpcVPCGW327AF424": Object {
      "Properties": Object {
        "InternetGatewayId": Object {
          "Ref": "vpcresourcesvpcIGW4B72B206",
        },
        "VpcId": Object {
          "Ref": "vpcresourcesvpc14EAEEFF",
        },
      },
      "Type": "AWS::EC2::VPCGatewayAttachment",
    },
  },
}
`;

exports[`vpc matches snapshot 1`] = `
Object {
  "Outputs": Object {
    "baseapiEndpoint040B6804": Object {
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "https://",
            Object {
              "Ref": "baseapi7C07353A",
            },
            ".execute-api.us-west-2.",
            Object {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            Object {
              "Ref": "baseapiDeploymentStageapi8C07A726",
            },
            "/",
          ],
        ],
      },
    },
    "basedashboarddashboardUriEAE44BF9": Object {
      "Export": Object {
        "Name": "metaflowDashboard",
      },
      "Value": "https://console.aws.amazon.com/cloudwatch/home#dashboards:name=MetaflowDashboard",
    },
    "basemetaflowexportsMETAFLOWBATCHJOBQUEUEOutput73E11973": Object {
      "Export": Object {
        "Name": "METAFLOW_BATCH_JOB_QUEUE",
      },
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "arn:",
            Object {
              "Ref": "AWS::Partition",
            },
            ":batch:",
            Object {
              "Ref": "AWS::Region",
            },
            ":",
            Object {
              "Ref": "AWS::AccountId",
            },
            ":job-queue/jobs",
          ],
        ],
      },
    },
    "basemetaflowexportsMETAFLOWDATASTORESYSROOTS3OutputB3667D07": Object {
      "Export": Object {
        "Name": "METAFLOW_DATASTORE_SYSROOT_S3",
      },
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "s3://",
            Object {
              "Ref": "basebucket896CC8D5",
            },
            "/metaflow",
          ],
        ],
      },
    },
    "basemetaflowexportsMETAFLOWDATATOOLSSYSROOTS3OutputEB341D6B": Object {
      "Export": Object {
        "Name": "METAFLOW_DATATOOLS_SYSROOT_S3",
      },
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "s3://",
            Object {
              "Ref": "basebucket896CC8D5",
            },
            "/data",
          ],
        ],
      },
    },
    "basemetaflowexportsMETAFLOWDEFAULTDATASTOREOutput1853A6A3": Object {
      "Export": Object {
        "Name": "METAFLOW_DEFAULT_DATASTORE",
      },
      "Value": "s3",
    },
    "basemetaflowexportsMETAFLOWDEFAULTMETADATAOutputC3D76FF6": Object {
      "Export": Object {
        "Name": "METAFLOW_DEFAULT_METADATA",
      },
      "Value": "service",
    },
    "basemetaflowexportsMETAFLOWECSS3ACCESSIAMROLEOutput202E8AD0": Object {
      "Export": Object {
        "Name": "METAFLOW_ECS_S3_ACCESS_IAM_ROLE",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "basebatchs3taskrole78948B48",
          "Arn",
        ],
      },
    },
    "basemetaflowexportsMETAFLOWEVENTSSFNACCESSIAMROLEOutput25E5E879": Object {
      "Export": Object {
        "Name": "METAFLOW_EVENTS_SFN_ACCESS_IAM_ROLE",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "baseeventbridgeroleDDD03BB4",
          "Arn",
        ],
      },
    },
    "basemetaflowexportsMETAFLOWSERVICEINTERNALURLOutput99FE3EC0": Object {
      "Export": Object {
        "Name": "METAFLOW_SERVICE_INTERNAL_URL",
      },
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "http://",
            Object {
              "Fn::GetAtt": Array [
                "basenlbExternalNlb6737F112",
                "DNSName",
              ],
            },
            "/",
          ],
        ],
      },
    },
    "basemetaflowexportsMETAFLOWSERVICEURLOutput1475CCF8": Object {
      "Export": Object {
        "Name": "METAFLOW_SERVICE_URL",
      },
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            "http://",
            Object {
              "Fn::GetAtt": Array [
                "basenlbExternalNlb6737F112",
                "DNSName",
              ],
            },
            "/api",
          ],
        ],
      },
    },
    "basemetaflowexportsMETAFLOWSFNDYNAMODBTABLEOutput4A70DC76": Object {
      "Export": Object {
        "Name": "METAFLOW_SFN_DYNAMO_DB_TABLE",
      },
      "Value": Object {
        "Ref": "basetable8FB0C562",
      },
    },
    "basemetaflowexportsMETAFLOWSFNIAMROLEOutput63D27679": Object {
      "Export": Object {
        "Name": "METAFLOW_SFN_IAM_ROLE",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "basestepfunctionsroleFA71B322",
          "Arn",
        ],
      },
    },
  },
  "Parameters": Object {
    "AssetParameters880fea5c7119606d6fa0ebff0d589506d5171b7dbd23286dcd2096a611612ec3ArtifactHash196A455E": Object {
      "Description": "Artifact hash for asset \\"880fea5c7119606d6fa0ebff0d589506d5171b7dbd23286dcd2096a611612ec3\\"",
      "Type": "String",
    },
    "AssetParameters880fea5c7119606d6fa0ebff0d589506d5171b7dbd23286dcd2096a611612ec3S3Bucket1FFC04C5": Object {
      "Description": "S3 bucket for asset \\"880fea5c7119606d6fa0ebff0d589506d5171b7dbd23286dcd2096a611612ec3\\"",
      "Type": "String",
    },
    "AssetParameters880fea5c7119606d6fa0ebff0d589506d5171b7dbd23286dcd2096a611612ec3S3VersionKey68233D67": Object {
      "Description": "S3 key for asset version \\"880fea5c7119606d6fa0ebff0d589506d5171b7dbd23286dcd2096a611612ec3\\"",
      "Type": "String",
    },
  },
  "Resources": Object {
    "baseComputeEnvironmentEA41637B": Object {
      "Properties": Object {
        "ComputeResources": Object {
          "MaxvCpus": 90,
          "SecurityGroupIds": Array [
            Object {
              "Fn::GetAtt": Array [
                "basevpc395C82F1",
                "DefaultSecurityGroup",
              ],
            },
          ],
          "Subnets": Array [
            Object {
              "Ref": "basevpcPublicSubnet1SubnetAEDFD2F3",
            },
            Object {
              "Ref": "basevpcPublicSubnet2SubnetA8B45E65",
            },
          ],
          "Type": "FARGATE",
        },
        "ServiceRole": Object {
          "Fn::GetAtt": Array [
            "basebatchexecutionrole2BDA930D",
            "Arn",
          ],
        },
        "State": "ENABLED",
        "Type": "MANAGED",
      },
      "Type": "AWS::Batch::ComputeEnvironment",
    },
    "baseJobQueueE5B580A4": Object {
      "DependsOn": Array [
        "baseComputeEnvironmentEA41637B",
      ],
      "Properties": Object {
        "ComputeEnvironmentOrder": Array [
          Object {
            "ComputeEnvironment": Object {
              "Ref": "baseComputeEnvironmentEA41637B",
            },
            "Order": 1,
          },
        ],
        "JobQueueName": "jobs",
        "Priority": 1,
        "State": "ENABLED",
      },
      "Type": "AWS::Batch::JobQueue",
    },
    "baseapi7C07353A": Object {
      "Properties": Object {
        "EndpointConfiguration": Object {
          "Types": Array [
            "EDGE",
          ],
        },
        "Name": "api",
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "baseapiAccount4E59F07F": Object {
      "DependsOn": Array [
        "baseapi7C07353A",
      ],
      "Properties": Object {
        "CloudWatchRoleArn": Object {
          "Fn::GetAtt": Array [
            "baseapiCloudWatchRole13591CFA",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
    },
    "baseapiCloudWatchRole13591CFA": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "baseapiDeploymentE9A5AAF529768917e5f337691ab6da4a3e6af006": Object {
      "DependsOn": Array [
        "baseapiproxyANY5DE55765",
        "baseapiproxy658DB29B",
        "baseapidbschemastatusGETDACB6754",
        "baseapidbschemastatus9309C984",
      ],
      "Properties": Object {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": Object {
          "Ref": "baseapi7C07353A",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "baseapiDeploymentStageapi8C07A726": Object {
      "Properties": Object {
        "AccessLogSetting": Object {
          "DestinationArn": Object {
            "Fn::GetAtt": Array [
              "baseapiapilogsC00A746A",
              "Arn",
            ],
          },
          "Format": "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] \\"$context.httpMethod $context.resourcePath $context.protocol\\" $context.status $context.responseLength $context.requestId",
        },
        "DeploymentId": Object {
          "Ref": "baseapiDeploymentE9A5AAF529768917e5f337691ab6da4a3e6af006",
        },
        "MethodSettings": Array [
          Object {
            "DataTraceEnabled": true,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "MetricsEnabled": true,
            "ResourcePath": "/*",
          },
        ],
        "RestApiId": Object {
          "Ref": "baseapi7C07353A",
        },
        "StageName": "api",
        "TracingEnabled": true,
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "baseapiapilogsC00A746A": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "LogGroupName": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "AWS::StackName",
              },
              "-api",
            ],
          ],
        },
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "baseapidbschemastatus9309C984": Object {
      "Properties": Object {
        "ParentId": Object {
          "Fn::GetAtt": Array [
            "baseapi7C07353A",
            "RootResourceId",
          ],
        },
        "PathPart": "db_schema_status",
        "RestApiId": Object {
          "Ref": "baseapi7C07353A",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "baseapidbschemastatusGETDACB6754": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": Object {
          "ConnectionId": Object {
            "Ref": "gatewayLink66988216",
          },
          "ConnectionType": "VPC_LINK",
          "IntegrationHttpMethod": "GET",
          "IntegrationResponses": Array [
            Object {
              "StatusCode": "200",
            },
          ],
          "PassthroughBehavior": "WHEN_NO_MATCH",
          "Type": "HTTP_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "http://",
                Object {
                  "Fn::GetAtt": Array [
                    "basenlbExternalNlb6737F112",
                    "DNSName",
                  ],
                },
                ":8082/db_schema_status",
              ],
            ],
          },
        },
        "ResourceId": Object {
          "Ref": "baseapidbschemastatus9309C984",
        },
        "RestApiId": Object {
          "Ref": "baseapi7C07353A",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "baseapiproxy658DB29B": Object {
      "Properties": Object {
        "ParentId": Object {
          "Fn::GetAtt": Array [
            "baseapi7C07353A",
            "RootResourceId",
          ],
        },
        "PathPart": "{proxy+}",
        "RestApiId": Object {
          "Ref": "baseapi7C07353A",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "baseapiproxyANY5DE55765": Object {
      "Properties": Object {
        "AuthorizationType": "NONE",
        "HttpMethod": "ANY",
        "Integration": Object {
          "CacheKeyParameters": Array [
            "method.request.path.proxy",
          ],
          "ConnectionId": Object {
            "Ref": "gatewayLink66988216",
          },
          "ConnectionType": "VPC_LINK",
          "IntegrationHttpMethod": "ANY",
          "IntegrationResponses": Array [
            Object {
              "StatusCode": "200",
            },
          ],
          "PassthroughBehavior": "WHEN_NO_MATCH",
          "RequestParameters": Object {
            "integration.request.path.proxy": "method.request.path.proxy",
          },
          "Type": "HTTP_PROXY",
          "Uri": Object {
            "Fn::Join": Array [
              "",
              Array [
                "http://",
                Object {
                  "Fn::GetAtt": Array [
                    "basenlbExternalNlb6737F112",
                    "DNSName",
                  ],
                },
                "/{proxy}",
              ],
            ],
          },
        },
        "RequestParameters": Object {
          "method.request.path.proxy": true,
        },
        "ResourceId": Object {
          "Ref": "baseapiproxy658DB29B",
        },
        "RestApiId": Object {
          "Ref": "baseapi7C07353A",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "basebatchexecutionrole2BDA930D": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "batch.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSBatchServiceRole",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXRayDaemonWriteAccess",
              ],
            ],
          },
        ],
        "RoleName": "TestBatchExecutionRole",
      },
      "Type": "AWS::IAM::Role",
    },
    "basebatchs3taskrole78948B48": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXRayDaemonWriteAccess",
              ],
            ],
          },
        ],
        "RoleName": "TestBatchS3TaskRole",
      },
      "Type": "AWS::IAM::Role",
    },
    "basebatchs3taskroleDefaultPolicy7F7EBBFF": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":log-group:*",
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject*",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "basebucket896CC8D5",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "basebucket896CC8D5",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "basetable8FB0C562",
                    "Arn",
                  ],
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "basebatchs3taskroleDefaultPolicy7F7EBBFF",
        "Roles": Array [
          Object {
            "Ref": "basebatchs3taskrole78948B48",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "basebucket896CC8D5": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
    },
    "basebucketPolicy5A7A5190": Object {
      "Properties": Object {
        "Bucket": Object {
          "Ref": "basebucket896CC8D5",
        },
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "s3:*",
              "Condition": Object {
                "StringNotEquals": Object {
                  "s3:authType": "REST-HEADER",
                },
              },
              "Effect": "Deny",
              "Principal": Object {
                "AWS": "*",
              },
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":s3:::",
                    Object {
                      "Ref": "basebucket896CC8D5",
                    },
                    "/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "basedashboardDashboardCF824854": Object {
      "Properties": Object {
        "DashboardBody": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{\\"widgets\\":[{\\"type\\":\\"metric\\",\\"width\\":12,\\"height\\":6,\\"x\\":0,\\"y\\":0,\\"properties\\":{\\"view\\":\\"timeSeries\\",\\"title\\":\\"Metaflow S3 Artifacts\\",\\"region\\":\\"",
              Object {
                "Ref": "AWS::Region",
              },
              "\\",\\"metrics\\":[[\\"AWS/S3\\",\\"NumberOfObjects\\",\\"BucketName\\",\\"",
              Object {
                "Ref": "basebucket896CC8D5",
              },
              "\\",\\"StorageType\\",\\"AllStorageTypes\\",{\\"period\\":900,\\"stat\\":\\"Sum\\"}],[\\"AWS/S3\\",\\"BucketSizeBytes\\",\\"BucketName\\",\\"",
              Object {
                "Ref": "basebucket896CC8D5",
              },
              "\\",\\"StorageType\\",\\"StandardStorage\\",{\\"period\\":900,\\"stat\\":\\"Sum\\",\\"yAxis\\":\\"right\\"}]],\\"yAxis\\":{\\"left\\":{\\"min\\":0},\\"right\\":{\\"min\\":0}}}},{\\"type\\":\\"metric\\",\\"width\\":12,\\"height\\":6,\\"x\\":12,\\"y\\":0,\\"properties\\":{\\"view\\":\\"timeSeries\\",\\"title\\":\\"Metadata Service\\",\\"region\\":\\"",
              Object {
                "Ref": "AWS::Region",
              },
              "\\",\\"metrics\\":[[\\"AWS/ECS\\",\\"CPUUtilization\\",\\"ClusterName\\",\\"",
              Object {
                "Ref": "basemetaflowclusterD8ADD660",
              },
              "\\",\\"ServiceName\\",\\"",
              Object {
                "Fn::GetAtt": Array [
                  "basefargateserviceService7375FE51",
                  "Name",
                ],
              },
              "\\"],[\\"AWS/ECS\\",\\"MemoryUtilization\\",\\"ClusterName\\",\\"",
              Object {
                "Ref": "basemetaflowclusterD8ADD660",
              },
              "\\",\\"ServiceName\\",\\"",
              Object {
                "Fn::GetAtt": Array [
                  "basefargateserviceService7375FE51",
                  "Name",
                ],
              },
              "\\",{\\"yAxis\\":\\"right\\"}]],\\"yAxis\\":{},\\"period\\":900}}]}",
            ],
          ],
        },
        "DashboardName": "MetaflowDashboard",
      },
      "Type": "AWS::CloudWatch::Dashboard",
    },
    "basedatabaseDBInstance3FB2F292": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "AllocatedStorage": "20",
        "BackupRetentionPeriod": 7,
        "CopyTagsToSnapshot": true,
        "DBInstanceClass": "db.t2.small",
        "DBName": "metaflow",
        "DBParameterGroupName": "default.postgres11",
        "DBSubnetGroupName": Object {
          "Ref": "basedatabaseDBInstanceSubnetGroup06C71CBC",
        },
        "DeletionProtection": false,
        "Engine": "postgres",
        "EngineVersion": "11.5",
        "MasterUserPassword": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{{resolve:secretsmanager:",
              Object {
                "Ref": "basedatabasemetaflowrdssecret0FBDD809",
              },
              ":SecretString:password::}}",
            ],
          ],
        },
        "MasterUsername": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{{resolve:secretsmanager:",
              Object {
                "Ref": "basedatabasemetaflowrdssecret0FBDD809",
              },
              ":SecretString:username::}}",
            ],
          ],
        },
        "PubliclyAccessible": false,
        "StorageType": "gp2",
        "VPCSecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "baserdssg8553A4F4",
              "GroupId",
            ],
          },
        ],
      },
      "Type": "AWS::RDS::DBInstance",
      "UpdateReplacePolicy": "Delete",
    },
    "basedatabaseDBInstanceSubnetGroup06C71CBC": Object {
      "Properties": Object {
        "DBSubnetGroupDescription": "Subnet group for DBInstance database",
        "SubnetIds": Array [
          Object {
            "Ref": "basevpcPublicSubnet1SubnetAEDFD2F3",
          },
          Object {
            "Ref": "basevpcPublicSubnet2SubnetA8B45E65",
          },
        ],
      },
      "Type": "AWS::RDS::DBSubnetGroup",
    },
    "basedatabasemetaflowrdssecret0FBDD809": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "Description": "This is a Secrets Manager secret for an RDS DB instance",
        "GenerateSecretString": Object {
          "ExcludePunctuation": true,
          "GenerateStringKey": "password",
          "IncludeSpace": false,
          "SecretStringTemplate": "{\\"username\\":\\"master\\"}",
        },
        "Name": "metaflow-rds-secret",
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "basedatabasemetaflowrdssecretAttachment30B86948": Object {
      "Properties": Object {
        "SecretId": Object {
          "Ref": "basedatabasemetaflowrdssecret0FBDD809",
        },
        "TargetId": Object {
          "Ref": "basedatabaseDBInstance3FB2F292",
        },
        "TargetType": "AWS::RDS::DBInstance",
      },
      "Type": "AWS::SecretsManager::SecretTargetAttachment",
    },
    "basedbmigratehandler9DA0827D": Object {
      "DependsOn": Array [
        "baselambdaecsexecutionroleDefaultPolicy9B6F5190",
        "baselambdaecsexecutionrole22629F41",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "AssetParameters880fea5c7119606d6fa0ebff0d589506d5171b7dbd23286dcd2096a611612ec3S3Bucket1FFC04C5",
          },
          "S3Key": Object {
            "Fn::Join": Array [
              "",
              Array [
                Object {
                  "Fn::Select": Array [
                    0,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters880fea5c7119606d6fa0ebff0d589506d5171b7dbd23286dcd2096a611612ec3S3VersionKey68233D67",
                        },
                      ],
                    },
                  ],
                },
                Object {
                  "Fn::Select": Array [
                    1,
                    Object {
                      "Fn::Split": Array [
                        "||",
                        Object {
                          "Ref": "AssetParameters880fea5c7119606d6fa0ebff0d589506d5171b7dbd23286dcd2096a611612ec3S3VersionKey68233D67",
                        },
                      ],
                    },
                  ],
                },
              ],
            ],
          },
        },
        "Description": "Trigger DB Migration",
        "Environment": Object {
          "Variables": Object {
            "MD_LB_ADDRESS": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "http://",
                  Object {
                    "Fn::GetAtt": Array [
                      "basenlbExternalNlb6737F112",
                      "DNSName",
                    ],
                  },
                  ":8082",
                ],
              ],
            },
          },
        },
        "FunctionName": "migrate-db",
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "baselambdaecsexecutionrole22629F41",
            "Arn",
          ],
        },
        "Runtime": "python3.8",
        "VpcConfig": Object {
          "SecurityGroupIds": Array [
            Object {
              "Fn::GetAtt": Array [
                "basefargatesgA0148482",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": Array [
            Object {
              "Ref": "basevpcPublicSubnet1SubnetAEDFD2F3",
            },
            Object {
              "Ref": "basevpcPublicSubnet2SubnetA8B45E65",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "baseecsexecutionrole1C93133C": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": "TestEcsExecutionRole",
      },
      "Type": "AWS::IAM::Role",
    },
    "baseecsexecutionroleDefaultPolicy12C81BFE": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ecr:GetAuthorizationToken",
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ecr:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":repository/*",
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "baseecsloggroupE4AF2B1C",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "basedatabasemetaflowrdssecret0FBDD809",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "baseecsexecutionroleDefaultPolicy12C81BFE",
        "Roles": Array [
          Object {
            "Ref": "baseecsexecutionrole1C93133C",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "baseecsloggroupE4AF2B1C": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "LogGroupName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/ecs/",
              Object {
                "Ref": "AWS::StackName",
              },
              "-metadata-service-v2",
            ],
          ],
        },
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "baseecsroleDefaultPolicy8840B6CF": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject*",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "basebucket896CC8D5",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "basebucket896CC8D5",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "baseecsroleDefaultPolicy8840B6CF",
        "Roles": Array [
          Object {
            "Ref": "baseecsroleFD18FA52",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "baseecsroleFD18FA52": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role",
              ],
            ],
          },
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "TestEcsRole",
      },
      "Type": "AWS::IAM::Role",
    },
    "baseecstaskroleDefaultPolicyBA603954": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject*",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "basebucket896CC8D5",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "basebucket896CC8D5",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "baseecsloggroupE4AF2B1C",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "baseecstaskroleDefaultPolicyBA603954",
        "Roles": Array [
          Object {
            "Ref": "baseecstaskroleEF40CB21",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "baseecstaskroleEF40CB21": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXRayDaemonWriteAccess",
              ],
            ],
          },
        ],
        "RoleName": "Test-EcsTaskRole",
      },
      "Type": "AWS::IAM::Role",
    },
    "baseeventbridgeroleDDD03BB4": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": "TestEventBridgeRole",
      },
      "Type": "AWS::IAM::Role",
    },
    "baseeventbridgeroleDefaultPolicy7662F833": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":states:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":stateMachine:*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "baseeventbridgeroleDefaultPolicy7662F833",
        "Roles": Array [
          Object {
            "Ref": "baseeventbridgeroleDDD03BB4",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "baseeventbusD58D9B5A": Object {
      "Properties": Object {
        "Name": "TestbaseeventbusB38401F8",
      },
      "Type": "AWS::Events::EventBus",
    },
    "basefargateserviceService7375FE51": Object {
      "DependsOn": Array [
        "basenlbdbmigratelistener6842633A",
        "basenlbnlblistener3E74A322",
      ],
      "Properties": Object {
        "Cluster": Object {
          "Ref": "basemetaflowclusterD8ADD660",
        },
        "DeploymentConfiguration": Object {
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 75,
        },
        "DesiredCount": 1,
        "EnableECSManagedTags": false,
        "HealthCheckGracePeriodSeconds": 600,
        "LaunchType": "FARGATE",
        "LoadBalancers": Array [
          Object {
            "ContainerName": "metadata-service-v2",
            "ContainerPort": 8080,
            "TargetGroupArn": Object {
              "Ref": "basenlbnlbtargetgroup620EA5FB",
            },
          },
          Object {
            "ContainerName": "metadata-service-v2",
            "ContainerPort": 8082,
            "TargetGroupArn": Object {
              "Ref": "basenlbdbmigratetargetgroup6B0C567F",
            },
          },
        ],
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "ENABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "basefargatesgA0148482",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "basevpcPublicSubnet1SubnetAEDFD2F3",
              },
              Object {
                "Ref": "basevpcPublicSubnet2SubnetA8B45E65",
              },
            ],
          },
        },
        "TaskDefinition": Object {
          "Ref": "basefargateservicemetaflowfargatetaskdefinition15DFDABF",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "basefargateservicemetaflowfargatetaskdefinition15DFDABF": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Cpu": 512,
            "Environment": Array [
              Object {
                "Name": "MF_METADATA_DB_HOST",
                "Value": Object {
                  "Fn::GetAtt": Array [
                    "basedatabaseDBInstance3FB2F292",
                    "Endpoint.Address",
                  ],
                },
              },
              Object {
                "Name": "MF_METADATA_DB_PORT",
                "Value": Object {
                  "Fn::GetAtt": Array [
                    "basedatabaseDBInstance3FB2F292",
                    "Endpoint.Port",
                  ],
                },
              },
              Object {
                "Name": "MF_METADATA_DB_USER",
                "Value": "master",
              },
              Object {
                "Name": "MF_METADATA_DB_PSWD",
                "Value": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "{{resolve:secretsmanager:",
                      Object {
                        "Ref": "basedatabasemetaflowrdssecret0FBDD809",
                      },
                      ":SecretString:password::}}",
                    ],
                  ],
                },
              },
              Object {
                "Name": "MF_METADATA_DB_NAME",
                "Value": "metaflow",
              },
            ],
            "Essential": true,
            "Image": "netflixoss/metaflow_metadata_service",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "baseecsloggroupE4AF2B1C",
                },
                "awslogs-region": "us-west-2",
                "awslogs-stream-prefix": "ecs",
              },
            },
            "Memory": 1024,
            "Name": "metadata-service-v2",
            "PortMappings": Array [
              Object {
                "ContainerPort": 8080,
                "HostPort": 8080,
                "Protocol": "tcp",
              },
              Object {
                "ContainerPort": 8082,
                "HostPort": 8082,
                "Protocol": "tcp",
              },
            ],
          },
        ],
        "Cpu": "512",
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "baseecsexecutionrole1C93133C",
            "Arn",
          ],
        },
        "Family": "metadata-service-v2",
        "Memory": "1024",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "baseecstaskroleEF40CB21",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "basefargatesgA0148482": Object {
      "Properties": Object {
        "GroupDescription": "Test/base/fargate-sg",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": Object {
              "Fn::GetAtt": Array [
                "basevpc395C82F1",
                "CidrBlock",
              ],
            },
            "Description": "Allow API Calls Internally",
            "FromPort": 8080,
            "IpProtocol": "tcp",
            "ToPort": 8080,
          },
          Object {
            "CidrIp": Object {
              "Fn::GetAtt": Array [
                "basevpc395C82F1",
                "CidrBlock",
              ],
            },
            "Description": "Allow API Calls Internally",
            "FromPort": 8082,
            "IpProtocol": "tcp",
            "ToPort": 8082,
          },
        ],
        "VpcId": Object {
          "Ref": "basevpc395C82F1",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "basefargatesgfromTestbasefargatesg2254BBE9ALLTRAFFIC83E36685": Object {
      "Properties": Object {
        "Description": "Internal Communication",
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "basefargatesgA0148482",
            "GroupId",
          ],
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "basefargatesgA0148482",
            "GroupId",
          ],
        },
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "baselambdaecsexecutionrole22629F41": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXRayDaemonWriteAccess",
              ],
            ],
          },
        ],
        "RoleName": "TestLambdaEcsExecuteRole",
      },
      "Type": "AWS::IAM::Role",
    },
    "baselambdaecsexecutionroleDefaultPolicy9B6F5190": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DeleteNetworkInterface",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":log-group:*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "baselambdaecsexecutionroleDefaultPolicy9B6F5190",
        "Roles": Array [
          Object {
            "Ref": "baselambdaecsexecutionrole22629F41",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "basemetaflowcluster147DCA8F": Object {
      "Properties": Object {
        "CapacityProviders": Array [
          "FARGATE",
          "FARGATE_SPOT",
        ],
        "Cluster": Object {
          "Ref": "basemetaflowclusterD8ADD660",
        },
        "DefaultCapacityProviderStrategy": Array [],
      },
      "Type": "AWS::ECS::ClusterCapacityProviderAssociations",
    },
    "basemetaflowclusterD8ADD660": Object {
      "Properties": Object {
        "ClusterSettings": Array [
          Object {
            "Name": "containerInsights",
            "Value": "enabled",
          },
        ],
      },
      "Type": "AWS::ECS::Cluster",
    },
    "basemetaflowexportsMETAFLOWBATCHJOBQUEUEParamA1187AFA": Object {
      "Properties": Object {
        "Name": "METAFLOW_BATCH_JOB_QUEUE",
        "Type": "String",
        "Value": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":batch:",
              Object {
                "Ref": "AWS::Region",
              },
              ":",
              Object {
                "Ref": "AWS::AccountId",
              },
              ":job-queue/jobs",
            ],
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "basemetaflowexportsMETAFLOWDATASTORESYSROOTS3ParamEA796E31": Object {
      "Properties": Object {
        "Name": "METAFLOW_DATASTORE_SYSROOT_S3",
        "Type": "String",
        "Value": Object {
          "Fn::Join": Array [
            "",
            Array [
              "s3://",
              Object {
                "Ref": "basebucket896CC8D5",
              },
              "/metaflow",
            ],
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "basemetaflowexportsMETAFLOWDATATOOLSSYSROOTS3Param4119272A": Object {
      "Properties": Object {
        "Name": "METAFLOW_DATATOOLS_SYSROOT_S3",
        "Type": "String",
        "Value": Object {
          "Fn::Join": Array [
            "",
            Array [
              "s3://",
              Object {
                "Ref": "basebucket896CC8D5",
              },
              "/data",
            ],
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "basemetaflowexportsMETAFLOWDEFAULTDATASTOREParamB6C13A7B": Object {
      "Properties": Object {
        "Name": "METAFLOW_DEFAULT_DATASTORE",
        "Type": "String",
        "Value": "s3",
      },
      "Type": "AWS::SSM::Parameter",
    },
    "basemetaflowexportsMETAFLOWDEFAULTMETADATAParam0445EE53": Object {
      "Properties": Object {
        "Name": "METAFLOW_DEFAULT_METADATA",
        "Type": "String",
        "Value": "service",
      },
      "Type": "AWS::SSM::Parameter",
    },
    "basemetaflowexportsMETAFLOWECSS3ACCESSIAMROLEParam8D7F0323": Object {
      "Properties": Object {
        "Name": "METAFLOW_ECS_S3_ACCESS_IAM_ROLE",
        "Type": "String",
        "Value": Object {
          "Fn::GetAtt": Array [
            "basebatchs3taskrole78948B48",
            "Arn",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "basemetaflowexportsMETAFLOWEVENTSSFNACCESSIAMROLEParam843BE1EF": Object {
      "Properties": Object {
        "Name": "METAFLOW_EVENTS_SFN_ACCESS_IAM_ROLE",
        "Type": "String",
        "Value": Object {
          "Fn::GetAtt": Array [
            "baseeventbridgeroleDDD03BB4",
            "Arn",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "basemetaflowexportsMETAFLOWSERVICEINTERNALURLParam4E18FDB2": Object {
      "Properties": Object {
        "Name": "METAFLOW_SERVICE_INTERNAL_URL",
        "Type": "String",
        "Value": Object {
          "Fn::Join": Array [
            "",
            Array [
              "http://",
              Object {
                "Fn::GetAtt": Array [
                  "basenlbExternalNlb6737F112",
                  "DNSName",
                ],
              },
              "/",
            ],
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "basemetaflowexportsMETAFLOWSERVICEURLParam5B4E3557": Object {
      "Properties": Object {
        "Name": "METAFLOW_SERVICE_URL",
        "Type": "String",
        "Value": Object {
          "Fn::Join": Array [
            "",
            Array [
              "http://",
              Object {
                "Fn::GetAtt": Array [
                  "basenlbExternalNlb6737F112",
                  "DNSName",
                ],
              },
              "/api",
            ],
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "basemetaflowexportsMETAFLOWSFNDYNAMODBTABLEParamE6ACAF4E": Object {
      "Properties": Object {
        "Name": "METAFLOW_SFN_DYNAMO_DB_TABLE",
        "Type": "String",
        "Value": Object {
          "Ref": "basetable8FB0C562",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "basemetaflowexportsMETAFLOWSFNIAMROLEParam58C49C72": Object {
      "Properties": Object {
        "Name": "METAFLOW_SFN_IAM_ROLE",
        "Type": "String",
        "Value": Object {
          "Fn::GetAtt": Array [
            "basestepfunctionsroleFA71B322",
            "Arn",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "basenlbExternalNlb6737F112": Object {
      "Properties": Object {
        "LoadBalancerAttributes": Array [
          Object {
            "Key": "deletion_protection.enabled",
            "Value": "false",
          },
        ],
        "Scheme": "internal",
        "Subnets": Array [
          Object {
            "Ref": "basevpcPublicSubnet1SubnetAEDFD2F3",
          },
          Object {
            "Ref": "basevpcPublicSubnet2SubnetA8B45E65",
          },
        ],
        "Type": "network",
      },
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
    },
    "basenlbdbmigratelistener6842633A": Object {
      "Properties": Object {
        "DefaultActions": Array [
          Object {
            "TargetGroupArn": Object {
              "Ref": "basenlbdbmigratetargetgroup6B0C567F",
            },
            "Type": "forward",
          },
        ],
        "LoadBalancerArn": Object {
          "Ref": "basenlbExternalNlb6737F112",
        },
        "Port": 8082,
        "Protocol": "TCP",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "basenlbdbmigratetargetgroup6B0C567F": Object {
      "Properties": Object {
        "HealthCheckIntervalSeconds": 10,
        "HealthCheckPort": "8080",
        "HealthCheckProtocol": "TCP",
        "HealthCheckTimeoutSeconds": 10,
        "HealthyThresholdCount": 2,
        "Port": 8082,
        "Protocol": "TCP",
        "TargetType": "ip",
        "UnhealthyThresholdCount": 2,
        "VpcId": Object {
          "Ref": "basevpc395C82F1",
        },
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
    },
    "basenlbnlblistener3E74A322": Object {
      "Properties": Object {
        "DefaultActions": Array [
          Object {
            "TargetGroupArn": Object {
              "Ref": "basenlbnlbtargetgroup620EA5FB",
            },
            "Type": "forward",
          },
        ],
        "LoadBalancerArn": Object {
          "Ref": "basenlbExternalNlb6737F112",
        },
        "Port": 80,
        "Protocol": "TCP",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "basenlbnlbtargetgroup620EA5FB": Object {
      "Properties": Object {
        "HealthCheckIntervalSeconds": 10,
        "HealthCheckProtocol": "TCP",
        "HealthCheckTimeoutSeconds": 10,
        "HealthyThresholdCount": 2,
        "Port": 8080,
        "Protocol": "TCP",
        "TargetType": "ip",
        "UnhealthyThresholdCount": 2,
        "VpcId": Object {
          "Ref": "basevpc395C82F1",
        },
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
    },
    "baserdssg8553A4F4": Object {
      "Properties": Object {
        "GroupDescription": "Test/base/rds-sg",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "basevpc395C82F1",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "baserdssgfromTestbasefargatesg2254BBE954322DAADBF6": Object {
      "Properties": Object {
        "Description": "from Testbasefargatesg2254BBE9:5432",
        "FromPort": 5432,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "baserdssg8553A4F4",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "basefargatesgA0148482",
            "GroupId",
          ],
        },
        "ToPort": 5432,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "basestepfunctionsroleDefaultPolicy9F249D75": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "batch:TerminateJob",
                "batch:DescribeJobs",
                "batch:DescribeJobDefinitions",
                "batch:DescribeJobQueues",
                "batch:RegisterJobDefinition",
                "batch:SubmitJob",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "logs:CreateLogDelivery",
                "logs:GetLogDelivery",
                "logs:UpdateLogDelivery",
                "logs:DeleteLogDelivery",
                "logs:ListLogDeliveries",
                "logs:PutResourcePolicy",
                "logs:DescribeResourcePolicies",
                "logs:DescribeLogGroups",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "events:PutTargets",
                "events:DescribeRule",
                "events:PutRule",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":events:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":rule/StepFunctionsGetEventsForBatchJobsRule",
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject*",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "basebucket896CC8D5",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "basebucket896CC8D5",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "basetable8FB0C562",
                    "Arn",
                  ],
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            Object {
              "Action": "events:PutEvents",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "baseeventbusD58D9B5A",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "basestepfunctionsroleDefaultPolicy9F249D75",
        "Roles": Array [
          Object {
            "Ref": "basestepfunctionsroleFA71B322",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "basestepfunctionsroleFA71B322": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "states.us-west-2.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXRayDaemonWriteAccess",
              ],
            ],
          },
        ],
        "RoleName": "TestStepFunctionsRole",
      },
      "Type": "AWS::IAM::Role",
    },
    "basetable8FB0C562": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "AttributeDefinitions": Array [
          Object {
            "AttributeName": "pathspec",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": Array [
          Object {
            "AttributeName": "pathspec",
            "KeyType": "HASH",
          },
        ],
        "PointInTimeRecoverySpecification": Object {
          "PointInTimeRecoveryEnabled": true,
        },
        "TimeToLiveSpecification": Object {
          "AttributeName": "ttl",
          "Enabled": true,
        },
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Delete",
    },
    "basevpc395C82F1": Object {
      "Properties": Object {
        "CidrBlock": "10.20.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Test/base/vpc",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "basevpcIGW4B6BCB5E": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Test/base/vpc",
          },
        ],
      },
      "Type": "AWS::EC2::InternetGateway",
    },
    "basevpcPublicSubnet1DefaultRouteA2DEFBFB": Object {
      "DependsOn": Array [
        "basevpcVPCGWB52E8319",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "basevpcIGW4B6BCB5E",
        },
        "RouteTableId": Object {
          "Ref": "basevpcPublicSubnet1RouteTable987EFA54",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "basevpcPublicSubnet1RouteTable987EFA54": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Test/base/vpc/PublicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "basevpc395C82F1",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "basevpcPublicSubnet1RouteTableAssociation2E3C17BA": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "basevpcPublicSubnet1RouteTable987EFA54",
        },
        "SubnetId": Object {
          "Ref": "basevpcPublicSubnet1SubnetAEDFD2F3",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "basevpcPublicSubnet1SubnetAEDFD2F3": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1a",
        "CidrBlock": "10.20.0.0/24",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "Test/base/vpc/PublicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "basevpc395C82F1",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "basevpcPublicSubnet2DefaultRoute8BA2B278": Object {
      "DependsOn": Array [
        "basevpcVPCGWB52E8319",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "basevpcIGW4B6BCB5E",
        },
        "RouteTableId": Object {
          "Ref": "basevpcPublicSubnet2RouteTableE911ACFD",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "basevpcPublicSubnet2RouteTableAssociation9823C43D": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "basevpcPublicSubnet2RouteTableE911ACFD",
        },
        "SubnetId": Object {
          "Ref": "basevpcPublicSubnet2SubnetA8B45E65",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "basevpcPublicSubnet2RouteTableE911ACFD": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "Test/base/vpc/PublicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "basevpc395C82F1",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "basevpcPublicSubnet2SubnetA8B45E65": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1b",
        "CidrBlock": "10.20.1.0/24",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "Test/base/vpc/PublicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "basevpc395C82F1",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "basevpcVPCGWB52E8319": Object {
      "Properties": Object {
        "InternetGatewayId": Object {
          "Ref": "basevpcIGW4B6BCB5E",
        },
        "VpcId": Object {
          "Ref": "basevpc395C82F1",
        },
      },
      "Type": "AWS::EC2::VPCGatewayAttachment",
    },
    "gatewayLink66988216": Object {
      "Properties": Object {
        "Name": "apiGatewayECSLink",
        "TargetArns": Array [
          Object {
            "Ref": "basenlbExternalNlb6737F112",
          },
        ],
      },
      "Type": "AWS::ApiGateway::VpcLink",
    },
  },
}
`;
